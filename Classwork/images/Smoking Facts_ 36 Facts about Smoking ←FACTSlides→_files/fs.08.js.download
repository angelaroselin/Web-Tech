var pISLOCAL=(document.domain.substr(0,5)=="local");var pISTEST=(UTIL_querystring("test")!="");var pISSYSTEM=(pageType=="SYSTEM");var user=getEmptyUser();var pGetUserLoggedIn_done=false;var item=0;var pLoaded=false;var theEnd=false;var isMobile=false;var isPortrait=false;var GAshowalert=false;var autoslideOBJ=null;var getItem_inProcess=false;var preparedItemsForPortrait=false;var Taboola=(!pISTEST&&!pISLOCAL&&!pISSYSTEM);if(!pISSYSTEM){pGetUserLoggedIn()}
var factsCountCookie=0;var temptext=UTIL_getCookie("factsCount");if(isNaN(temptext)==false&&temptext!=""){factsCountCookie=parseInt(temptext)};

// get (from a cookie) what facts have been seen
var factsSeenCookie = UTIL_getCookie("factsSeen");

// ---- main functions ---- 

// returns an empty user array
function getEmptyUser() {  return { ID : null, name : null, FBID : null, animation : true, autoslide : 0, favs : null, missingFields : null, isRegistering : false, IP : null } }

// gets the user logged-in by cookie, if there's any
function pGetUserLoggedIn() {

	UTIL_JSON("/ajax/getUserLoggedIn.aspx", { items : itemsID.join(), pageType : pageType, alu : UTIL_querystring("alu"), alc : UTIL_querystring("alc") }, function(r){ 
		
		// flag this checking as... done!
		pGetUserLoggedIn_done = true;

		// if there's a user logged-in by cookie...
		if (r.ID!=null) { 

			// save the user info and show the user options
			user = r; 
			setUserLoginOrUserOptions();

			// is the current page coming from a successful register with FB? if so, we show the user profile, step #2
			if (UTIL_querystring("FBLogin") == 'register') { user.isRegistering = true; profile_show( true ) };

		}

		// set the user login or user options on screen
		setUserLoginOrUserOptions()

		// run or stop autoslide feature
		slideSettings_autoslide()

		// if there are missing fields, ask the user to fill them.. if the page hasn't loaded yet, we try again in a few seconds
		if (user.missingFields!=null) {
			if (pLoaded) {
				missingFields_show();
			} else {
				setTimeout( function(){ missingFields_show() }, 3000);
			}
			
		}

	}) 
}



// page Init: called right after <body>
function pInit() {

	// is mobile
	isMobile = UTIL_browserIsMobile();

	// is the orientation landscape?
	isPortrait = (window.innerHeight > window.innerWidth);

	// set font size according to windows size
	setFontSize()

	// on window resize, reload the page... only if we're not on a mobile and over an input
	window.onresize = function() { 
		//if($("input").is(":focus")==false || isMobile==false) { 
	

			// reevaluate if it is landscape
			isPortrait = $(window).height() > $(window).width();

			// set font size according to windows size
			setFontSize();

			// reload the current fact
			getItem( false, item );


		//} 
	};


}	



// page loading: called right after loading the items structure and login + register screens
function pLoad() {

 
	// pLoaded flag
	pLoaded = true;

 
	// if a user is not logged in... read cookies for preferences of visitors non registered
	if (user.ID==null) {

		// get animation setting from cookie
		user.animation = (UTIL_getCookie("animate") != "false"); 
	
		// get autoslide setting from cookie
		var autoslideCookie = UTIL_getCookie("autoslide");
		if (autoslideCookie!="" && autoslideCookie!=null)  {
			if (!isNaN(autoslideCookie)) {  
				user.autoslide = parseInt(autoslideCookie)

				// start autoslide or remove it
				slideSettings_autoslide()
			}
		}

	// if the user is logged in... start autoslide or remove it
	} else {
	
		slideSettings_autoslide()
	}


	// prepare swipe for mobiles
	if ( isMobile && !pISSYSTEM ) {
		UTIL_swipedetect(document.getElementById('itemsContainer'), function(swipedir, distX, distY){
			$("#swipe").hide();
		    	if (swipedir =='right') {
				getItem(true);
				GAevent('Swipe', swipedir);
        		} else if (swipedir =='left') {
				getItem();
				GAevent('Swipe', swipedir);
			} else if (swipedir =='up') {
				$("html, body").animate({scrollTop:$(window).scrollTop() - (distY*2)}, '500', 'swing'); //$(window).scrollTop( $(window).scrollTop() - distY );				
	       		} else if (swipedir =='down') {
				$("html, body").animate({scrollTop:$(window).scrollTop() - (distY*2)}, '500', 'swing'); //$(window).scrollTop( $(window).scrollTop() - distY );						
			}
		})
	}

	// hide loading
	$("#alert_loading").hide()


	// try to get the request item, if any
	var goToItem = null;
	if (window.location.hash.length > 3) {
		if (window.location.hash.substr(0,3)=="#gi") {
			var goToItemSTR = window.location.hash.substr(3)
			if (isNaN(goToItemSTR)==false){ goToItem = parseInt( goToItemSTR ) } 
		}
	}

	// show the first item
	getItem( false, goToItem );


	// was this page requested with an email address to start registtration?
	var registerEmail = UTIL_querystring("registerEmail");
	if (registerEmail!='') { register_show(registerEmail) };

	// is this page coming from a FBLogin with errors? if so, we show the register, step #1
	var FBLogin = UTIL_querystring("FBLogin");
	if (FBLogin != 'register' && FBLogin != 'login' && FBLogin != '') {
		alert('There was a problem with Facebook Login... please try it now with an email and password!');
		if ( UTIL_querystring("FBLoginAction")=="login" ) {
			login_show();
		} else {
			register_show();
		}
	}


	// prepare ads
	prepareAds()



	// if the user came from a newsletter, save that click
	var utm_source = UTIL_querystring("utm_source");
	if (utm_source=='newsletter') {
		var utm_campaign = UTIL_querystring("utm_campaign");
		if (utm_campaign.length > 10) {
			var newsletter = utm_campaign.substr(10)
			if (!isNaN(newsletter)) { UTIL_JSON("/ajax/newsletterClick.aspx", { n: newsletter } ); }
		}
	}

}



// page key down (when a keyboard key was pressed) 
function pKeyDown(e) {
	var evt = e || window.event;
	var alertVisible = $(".alert").is(":visible");

	// if the key was the -> arrow... get next slide
	if (evt.keyCode == 39 && !alertVisible) { 
		getItem();

	// if the key was the <- arrow... get prev slide
	} else if (evt.keyCode == 37 && !alertVisible) { 
		getItem( true ); 

	// if the key was ESCAPE.. hide all alerts
	} else if (evt.keyCode == 27 && alertVisible) { 
		$(".alert").hide();
	}
}



// Set font relative to window width
function setFontSize(orient) {
	var pageW = $(window).width();
	document.body.style.fontSize = Math.floor( pageW /32 ) + 'px';
}



// Show user options
function setUserLoginOrUserOptions() {

	// if the page has not loaded yet, try again in a second
	if (!pLoaded) { setTimeout(function(){ setUserLoginOrUserOptions() }, 1000); return false; }

	// if a user is logged in...
	if (user.ID != null) {

		// show the user name on the panel
		$("#user_registered span").eq(1).text( (user.name!='' && user.name!=null ? user.name : "what's your name?"));	

		// show the users panel and hide the visitors one
		$("#user_visitor").hide();
		$("#user_registered").show();
		$("#sett").hide();

	// if NO USER is logged in...
	} else {

		// hide the users panel and show the visitors one
		$("#user_visitor").show();
		$("#user_registered").hide();
		$("#sett").show();
	}
}




// show a fact on screen
function getItem( isPrev, goTo ) {

	// if no specific item was specified...
	if (goTo==null) {

		// set current item number.. either if we are going backwards (PREV)
		if (isPrev) { 
			item -= 1; 
			theEnd = false; 

		// ... or we are going forward (NEXT)...
		} else { 
			item += 1;

			/*
			// for slideshows and search: if the item requested goes beyond what we want to show.. AND it is not theEnd.. we reload the page with that item as a start
			if (item % maxSlidesPerPage === 0 && (pageType=='SlideShow' || pageType=='FactsOfTheDay' || pageType=='KeywordSearch') && (item > itemsID.length-1 && (!theEnd && pageN==1))==false ) {
				var pageReloadURL = window.location.toString();
				if (window.location.hash.toString()!='') { pageReloadURL = pageReloadURL.replace(window.location.hash.toString(),'') };
				pageReloadURL += '#gi' + item;
				location = pageReloadURL;	
				location.reload();				
			}
			*/

		};

	// if a specific item was specified... go to it
	} else {
		item = goTo;
	}



	// if the item requested is before the first...
	if (item < 1) { 

		// --- go to the PREV button's URL, if there is one, and get out of here ----

		// reset item # and theEnd and get out
		item = 1;
		theEnd = false;

		var prevPage = $("#prevA").attr("href");
		if (prevPage!='' && prevPage!='#' && !pISSYSTEM) { 
			location = prevPage + '#gi' + pageSize;
		} else {			
			return false;
		}


	// if the item requested is above the last one... and we haven't shown theEnd even thou we should because current page is 1...
	} else if (item > itemsID.length-1 && (!theEnd && pageN==1)) {

		// --- show theEnd ----

		// set flag for theEnd of the collection
		theEnd = true;

		// load taboola
		if (Taboola) {
			window._taboola = window._taboola || [];
			_taboola.push({mode:'thumbs-2r', container:'taboola-endslate', placement:'endslate'});
			_taboola.push({flush:true});
		}
 
		// hide all items
		$(".i").hide()

		// fade in the ending item container
		$("#fe").addClass('animated fadeIn');
		$("#fe").css("opacity", "1");
		$("#fe").show();

		// g analytics
		GApageview( pageURL + "/TheEnd"); 		


	// if the item requested is above the last one... and we have shown theEnd or the current page 1...
	} else if (item > itemsID.length-1 && (theEnd || pageN > 1)) {

		// --- go to the NEXT button's URL ---
		location = $("#nextA").attr("href");


	// in any other case.. 
	} else {

		// ------ buttons and ads 

		// show kixer ad for mobile if it's the #22 item .. it's not local.. and kixer was loaded
		//if ( (!pISTEST && !pISLOCAL && !pISSYSTEM) && (factsCountCookie==15) && (typeof kixerGo == 'function') ) { kixerGo() };

		// hide "The End", if it was on and PREV was requested
		if (theEnd && isPrev) { $("#fe").hide() };

		// show / hide the prev button
		if (item > 1 || pageN > 1) { $("#prevA").show() } else { $("#prevA").hide() };


		// ------ prepare for portrait or landscape

		prepareItemsForPortraitOrLandscape()




		// ---- add fact tools (SOURCE, SHARE, FAV)

		// get the factTools object according to the orientation.. hide the object for the other orientation
		var factTools = $("#factToolsPortrait");
		if ( isPortrait == false ) { 
			factTools.hide();
			factTools = $("#i" + item).find(".factTools");
		} else { 
			factTools.show();
		}

		// get the tools
		var source = $("#source");
		var share = $("#share");
		var favorite = $("#fav");

		// add them to the factTools object
		factTools.append( source );
		factTools.append( share );
		factTools.append( favorite );

		// if it is in LANDSCAPE mode...
		if ( isPortrait == false ) {

			// SOURCE: set a bgcolor and color for the source button extracting it from the text background and text color
			var color   = getColorOf( factTools.parent(), "color" );
			var bgcolor = getColorOf( factTools.parent() );
			if (bgcolor!=null && color!=null && !isTransparent(bgcolor) && !isTransparent(color)) {
				source.css("color", bgcolor);
				source.css("background-color", color);
			} else {
				source.css("color", "");
				source.css("background-color", "");
			}


		// if it's in PORTRAIT mode...
		} else {

			// SOURCE: reset the color and backcolor
			source.css("color", 		"");
			source.css("background-color", 	"");

			// set the css for the facttools block
			factTools.css("width", 		"100%");
			factTools.css("text-align", 	"center");
			factTools.css("margin-top", 	"0.8em");
			factTools.css("padding-bottom", "2em");
			factTools.css("font-size", 	"1em");
			factTools.show();
		}

		

		// SOURCE: set alt text (link and bibliography)
		source.attr("title", (itemsBiblio[item]!='' ? itemsBiblio[item] + " - " + itemsSource[item] : itemsSource[item]))
	
		// SOURCE: set it to be visible or hidden 
		if (itemsSource[item]!='') { source.show() } else { source.hide() };
	
		// FAV: set favorite as marked if it was favorited.. or leave it unfavorited if not			
		fav_setFavOrNot( itemsID[item] );
	
		// FIX: set Illustration link
		/*
		var fil = $("#fil");
		if (itemsIllus[item]!='') {
			fil.show()
			fil.find("a").attr("href", itemsIllus[item]);
			fil.find("a").attr("onclick", "GAevent('Illustration', 'click', itemsIllus[item]); ");
		} else {
			fil.hide()
		}
		*/



		// ------ move the slider

		//  move the previous item to the left... move the current item to the middle... move the next item to the right
		$(".i").hide()
		getItemSlideEffect( -2, isPrev );
		getItemSlideEffect( -1, isPrev );
		getItemSlideEffect( 0,  isPrev );
		getItemSlideEffect( +1, isPrev );



		//------- Analytics & Seen facts

		// Analytics: Add this as a pageview.. if it's not a single fact, which was already added when loading
		if (!isPrev && pageType != "SingleFact") { GApageview( pageURL + "/Item" + itemsID[item] ) }
 

		// Seen Facts: Add this item
		seenItems( itemsID[item] );
	}


}




function getItemSlideEffect( i, isPrev ) {
	var obj = $("#items").find("ol").find("#i" + (item + i));
	if (obj==null) { return false };

	switch(i) {
		case -2:
			obj.animate({ opacity: "0.3", left: "-200%" }, 500);
			break;
		case -1:
			if (isPrev) { obj.css("left", "-200%") };
			obj.show();
			obj.animate({ opacity: "0.3", left: "-100%" }, 500);
			break;

		// place the item on the screen
		case 0: 
			if (isPrev) { obj.css("left", "-100%") };
			obj.show();
			obj.animate({ opacity: "1", left: "0%" }, 500);
			break;

		// place the item up next
		case 1:
			obj.css("left", (!isPrev ? "200%" : "0%"));
			obj.show();
			obj.animate({ opacity: "0.3", left: "100%" }, 500);
			break;			
	}
}



function getColorOf(obj, typeOfColor) {
	if (typeOfColor==null){ typeOfColor = "background-color"; };
	var bc = null;
	var $elm = obj;
	var i=0;
	while (isTransparent(bc = $elm.css(typeOfColor)) && i < 6) {
		i += 1;
		if ($elm.is("body")) {      
			return;
		}
		$elm = $elm.parent();
	}
	return bc;
}


function isTransparent(color) {
	switch ((color || "").replace(/\s+/g, '').toLowerCase()) {
		case "transparent":
		case "":
		case "rgba(0,0,0,0)":
			return true;
		default:
			return false;
	}
}




function prepareItemsForPortraitOrLandscape() {


	// get the current item.. its container.. and the hidden container we'll use to save landscape items
	var itemOBJ 	= $("#i" + item);
	var parentOBJ 	= itemOBJ.parent().parent();
	var hli 	= $("#hiddenLandscapeItems");

	// if the orientation is portrait...
	if ( isPortrait && pISSYSTEM==false ){ 

		// --- prepare the enviroment for portait orientation.. if we never did that
		if (preparedItemsForPortrait==false) {
			
			// save the landscape items in a hidden div
			var clonedParentOBJ = parentOBJ.clone();
			clonedParentOBJ.attr("id", "hidden_items_parent")
			hli.append( clonedParentOBJ );

			// get the new height of the item.. which will be 1.7 times smaller than the height (it is 2.5 in landscape)
			var h = (itemOBJ.width() / 1.7);

			// set the height the item and its container
			parentOBJ.css("height", h + "px" );	
			parentOBJ.css("padding-bottom", "0" );
			itemOBJ.css("height", h + "px" );

			// reset next/prev button top position
			$("#prev").hide();
			$("#prevT").hide();
			$("#next").hide();
			$("#nextT").hide();

			// show swipe info.. and hide it in a few seconds
			$("#swipe").css("top", ($("#header").height() + h - (h * 0.25)) + "px" );
			$("#swipe").css("height", (h * 0.25) + "px" );
			$("#swipe").show();
			
			// set the flag "prepared for portrait" as true
			preparedItemsForPortrait = true;
		}

		// --- create portrait version of this fact

		// get fact text
		var fact 	= itemsHTML[item].replace(new RegExp("<span>", 'g'),"<span style='color:gold'>");
		var cleanFact 	= $.trim( fact.replace(/(\r\n|\n|\r)/gm," ").replace(/	/gm," ").replace(/ +(?= )/g,"") );

		// get image: try to get an image inside the fact
		var img 	= itemOBJ.find("img");			
		var imgfilter 	= "<div style='z-Index:1; background-image:url(/imgs/filter.png); background-size:0.1em; width:100%; height:100%; position:absolute;  '></div>"	
		if (img.is("img")==false) { img=null }

		// if we found an image inside the fact...
		if (img!=null) { 

			// set that image as background at 100% of height, right in the middle
			itemOBJ.css("background-image", 	"url('" + img.attr("src") + "')"); 
			itemOBJ.css("background-size", 		"auto 100%"); 
			itemOBJ.css("background-position",	"50% 50%"); 

		// if we could get an image from the background of the fact...
		} else if (itemOBJ.css("background-image").indexOf('url')==0) {

			// set the background size at 100% of the height, if we can
			var bgs = itemOBJ.css("background-width");
			if (bgs!=null) { if (bgs.length>3){ if (bgs.substr(0,4)=="100%"){ bgs = null } } }
			if (bgs==null) {
				itemOBJ.css("background-size", "auto 100%");

				// set the background position to the middle or to the right (if it was already to the right)
				var bgp = itemOBJ.css("background-position");

				if (bgp!=null) { if (bgp.length>3){ if (bgp.substr(0,4)!="100%"){ bgp = null } } }
				if ( bgp == null ) {
					itemOBJ.css("background-position","50% 50%"); 
				} else {
					itemOBJ.css("background-position","auto 100%"); 
				}
			} 

		// if there's no image for the fact...
		} else {

			// use the text bg color as background color
			itemOBJ.css("background-color", getColorOf( itemOBJ.find(".factTools").parent() )  )
		}		


		// set text and filter
		itemOBJ.html(imgfilter + "<div style='z-Index:3; text-shadow:0.0em 0.0em 0.3em black; width:80%; margin:auto; text-align:center; position: relative; top: 50%; transform: perspective(1px) translateY(-50%); -webkit-transform: perspective(1px) translateY(-50%); -ms-transform: perspective(1px) translateY(-50%);'>" + fact + "</div>")

		// set text size and line height.. by trying big sizes and going down in size until it fits
		var h = itemOBJ.height();
		var fs = 6;
		itemOBJ.css("line-height", "1.1em");
		itemOBJ.css("font-size",   fs + "em");
		itemOBJ.css("height",      "auto");
		while ( (itemOBJ.height() * 1.5) > h ) {
			fs = fs * 0.9;
			itemOBJ.css("font-size", fs + "em" );
		}
		itemOBJ.css("height",  h + "px");


	// if the orientation is landscape... and we previously prepared the items for portrait (and now went back to landscape)...
	} else if (preparedItemsForPortrait) {

		// restore the landscape items and remove the portrait ones
		var hiddenparent = $("#hidden_items_parent");
		parentOBJ.parent().append( hiddenparent );
		var parentOBJID = parentOBJ.attr("id")
		parentOBJ.remove();
		hiddenparent.attr("id", parentOBJID);
	
		// show next and prev buttons
		$("#prev").show();
		$("#prevT").show();
		$("#next").show();
		$("#nextT").show();
		$("#swipe").hide();

		// reset the flag of "prepared for portrait"
		preparedItemsForPortrait = false;
	}

}



// saves an item as saved.. either on the DB (registered user) or in a cookie (visitor)
function seenItems( sItems ) {

	// if the userloggedin is done...
	if (pGetUserLoggedIn_done) {

		// if the user is logged in, we save this item as seen in the DB
		if (user.ID != null) { 
			UTIL_JSON("/ajax/seenItems.aspx", { i: sItems } );

		// if the user is NOT logged in.. save this item as seen in a cookie
		} else {

			// add it to the facts count cookie
			factsCountCookie += 1;	
			UTIL_setCookie("factsCount", factsCountCookie);
	
			// if we've shown quite a few items, show "register now" popup	
			if ( $(".alert").is(":visible")==false && ( factsCountCookie == 15 || factsCountCookie == 80 || factsCountCookie == 200 || factsCountCookie == 400 ) ) { $("#alert_registerNow").fadeIn() };

			// add this fact to the factsSeen cookie
			if ( (',' + factsSeenCookie + ',').indexOf(',' + sItems + ',') == -1 ) {
				factsSeenCookie += (factsSeenCookie!='' ? ',' : '') + sItems;
				UTIL_setCookie("factsSeen", factsSeenCookie);
			}
		}

	// if the userLoggedIn function is not done
	} else {

		// try this again in 2 seconds
		setTimeout( function() { seenItems(sItems) }, 2000);
	}
}


// ------ Categories --------

function categories_show(mainCategory, category, isOnMouseOver) {

	// show the main categories menu
	$("#mainCategories_menu").show();


	// are we in mobile mode?
	var isMobileMode = $("#mainCategories_menu img").is(":visible") == false
	if (isMobileMode && isOnMouseOver){ return false }

	// show the back
	$("#categories_menu_back").show();

	// if a main category was specified...
	if (mainCategory!=null) {

		// color the main category
		$("#mainCategories_menu div").removeClass("mainCategories_menu_selected");
		$("#mainCategories_menu_" + mainCategory).addClass("mainCategories_menu_selected");

		// if we are in mobile mode.. put the subcategories under this main category
		if (isMobileMode) {
			$(".categories_menu_" + mainCategory).addClass("categories_menu_selectedmobile");
			$("#mainCategories_menuMobile_" + mainCategory).append( $(".categories_menu_" + mainCategory) );
			$("#mainCategories_menuMobile_" + mainCategory).show();
		}

		// hide all categories
		$("#categories_menu_left div").hide();

		// show only the categories from the main category selected
		$(".categories_menu_" + mainCategory).show();

		// show the categories menu
		$("#categories_menu").show();

		// hide the slideshows menu
		$("#slideshows_menu").hide();

		// position the right arrow
		$("#categories_menu_right img").css("padding-top", $("#mainCategories_menu_" + mainCategory).offset().top - $("#categories_menu").offset().top  )

	}

	// if a category was specified...
	if (category!=null) {

		// color the category
		$("#categories_menu div").removeClass("mainCategories_menu_selected");
		$("#categories_menu_" + category).addClass("mainCategories_menu_selected");

		// hide all slides
		$("#slideshows_menu_left div").hide();

		// if we are in mobile mode.. put the slideshows under this category
		if (isMobileMode) {
			$(".categories_menuMobile").hide();
			//$("#slideshows_menu_left").append( $(".slideshows_menu_item") );
			$("#categories_menuMobile_" + category).append( $(".slideshows_menu_" + category) );
			$("#categories_menuMobile_" + category).css("display","block");
			$('html, body').animate({
			        scrollTop: $("#categories_menu_" + category).offset().top
			}, 1000);
		}

		// show only the categories from the main category selected
		$(".slideshows_menu_" + category).show();

		// show the slideshows menu
		$("#slideshows_menu").show();
		
		// position the right arrow
		var arrowpos = $("#categories_menu_" + category).offset().top - $("#slideshows_menu").offset().top;
		$("#slideshows_menu_right img").css("padding-top", arrowpos  )

		// if the right arrow is located below the end of the menu.. enlarge the menu.. otherwise.. set the height back to auto
		var mr = $("#slideshows_menu_left");
		if (arrowpos + $("#slideshows_menu_right img").height() > mr.height() ) { 
			mr.css("padding-top", arrowpos );
		} else { 
			mr.css("padding-top", "0" );
		}
	}
}

function categories_toggle() {
	if ($("#mainCategories_menu").is(":visible")) {
		categories_hide()
	} else {
		categories_show()
	}
}

function categories_hide() {
	$("#mainCategories_menu").hide();
	$("#categories_menu").hide();
	$("#slideshows_menu").hide();
}




// ------ Source & Share --------

function source() {
	GAevent('Source', 'click', itemsSource[item]);
	window.open( itemsSource[item], "_blank" );
}

function share() {
	GAevent('Share', 'click', itemsID[item]); 
	if (pageType=="RandomFacts" || pageType=="UserPersonalized") { 
		$("#rbl_share_slide_i").prop("checked", true);
		$("#alert_share_slide").hide();
	} else {
		$("#alert_share_slide").show();
	};
	$("#alert_share").show()
}


function share_getText() {
	var itemOBJ = $("#i" + item);
	return $.trim( itemOBJ.text().replace(/(\r\n|\n|\r)/gm," ").replace(/	/gm," ").replace(/ +(?= )/g,"").replace(itemOBJ.find(".factTools").text(),'') );
}

function share_getURL() {
	if ( $("#rbl_share_slide_i").prop("checked") ) {	
		return homeURL + 'i-' + itemsID[item]
	} else {			
		return homeURL + pageURL
	}
}

function share_getImage() {
	return 'http://www.factslides.com/imgs/ishots/' + itemsID[item] + '.png';
}


function share_FB() {
	var url = share_getURL();
	FB.ui({
	    method: 'share',
	    display: 'popup',
	    href: url
	}, function(response){});
	GAevent('Share', 'FB', url);
}

function share_TW() {
	var url = share_getURL()
	var purl = 'https://twitter.com/intent/tweet?hashtags=fact&text=' +  encodeURIComponent(share_getText()) + '&url=' +  encodeURIComponent(url) + '&via=factslides';
	var pw = 450;
	var ph = 380;
	var pl = (screen.width/2) - (pw/2);
	var pt = (screen.height/2) - (ph/2);
	var pwin = window.open(purl, "twittershare", "width=" + pw + ",height=" + ph + ",top="+ pt + ",left=" + pl);	
	GAevent('Share', 'TW', url);
}

function share_PI() {
	var url = share_getURL()
	var purl = 'https://pinterest.com/pin/create/button/?url=' +  encodeURIComponent(url) + '&media=' +  encodeURIComponent(share_getImage()) + '&description=' +  encodeURIComponent(share_getText());
	var pw = 780;
	var ph = 600;
	var pl = (screen.width/2) - (pw/2);
	var pt = (screen.height/2) - (ph/2);
	var pwin = window.open(purl, "pinterestshare", "width=" + pw + ",height=" + ph + ",top="+ pt + ",left=" + pl);	
	GAevent('Share', 'PI', url);	
}

function share_EM() {
	var url = share_getURL()
	location = 'mailto:?subject=' + encodeURIComponent('Interesting Fact') + '&body=' + encodeURIComponent(share_getText()) + ' - Read more at: ' + encodeURIComponent(url)
	GAevent('Share', 'EM', url);
}



function FBsubscribe_show() {
	var b = $("#FBsubscribeButton")
	var o = $("#FBsubscribe")
	o.css( "left", $( document ).width() - 200 )
	o.css( "top", (b.height() + (b.height() * 0.4)) + "px" )
	o.show()
}	
function FBsubscribe_hide() { $("#FBsubscribe").hide() }	



// ------ FAV --------

// favs or unfavs the current item
function fav() {


	// if the user is logged in...
	if (user.ID != null) {

		// is the item already faved?
		var favedIndex = -1;
		if (user.favs!=null) { favedIndex = user.favs.indexOf(itemsID[item]) };
		
		// if it is already faved.. UNFAV it!
		if (favedIndex != -1) {

			// remove it from the local array
			user.favs.splice( favedIndex, 1 );

			// remove it from the DB
			UTIL_JSON("/ajax/favItem.aspx", { i: itemsID[item], isUnfav : 1 } );

			// show the unfav on screen
			fav_show( false );


		// if the item is not faved... FAV it!
		} else {

			// add it to the local array
			if (user.favs==null) { user.favs = new Array() };  
			user.favs.push( itemsID[item] )	

			// add it to the DB
			UTIL_JSON("/ajax/favItem.aspx", { i: itemsID[item] } );

			// show the fav on screen
			fav_show( true );
		}
		
	// if the user is not logged in... invite him to register
	} else {
		alert('To save your favorites, please LOG IN or SIGN UP for free!')
		register_show();	
	}
}


// shows an item to be faved or not on the screen
function fav_show( faved ) {

	var f = $("#fav span");

	if (faved) {

		// set flag and color (extracting it from text highlight color)
		f.addClass("faved");

		var hlcolor = getColorOf( $("#fav").parent().parent().find("span"), "color" );
		if (hlcolor==null || isTransparent(hlcolor)) { hlcolor = "red" };
		f.css("color", hlcolor);

	} else {

		// remove flag and color
		f.removeClass("faved");
		f.css("color", "")
	}
}

function fav_setFavOrNot( itemID ) {

	// if the user has been already checked...
	if (pGetUserLoggedIn_done) {

		// if there are user favs saved...
		if (user.favs!=null) {					
			fav_show( user.favs.indexOf(itemID) > -1 );

		// if there are NO user favs saved...
		} else {
			fav_show( false );
		}

	// try again in a few milliseconds...
	} else {
		setTimeout( function(){ fav_setFavOrNot( itemID ) }, 1000 );
	}


}


// ------ Lockerdome (delete this!) ------


function fixBigAd() {
	//alert(screen.width)
	$("#bar_bigAd").css("height","auto")
	var h = $("#bar_bigAd").height()
	if (h!=null && h!=0) {
		nh = getNextMultipleOf( $(".barlist div")[0].getBoundingClientRect().height, h )
		console.log(nh + ' is the next multiple of ' + $(".barlist div")[0].getBoundingClientRect().height + ' starting at ' + $("#bar_bigAd").height() )
		$("#bar_bigAd").height(nh)
	}
}

function getNextMultipleOf( multipleOf, minimum ) {
	var v = 0;
	for (var i=1; v<minimum; i++ ) {
		v = multipleOf * i
	}
	return v
}

 




// ----- Login ------


// Login: show form
function login_show() {
	$("#alert_login").show();
	GAevent('Login', 'show');
}

// Login: login by email and password 
function login(f) {

	var e = f.txt_l_email.value;
	if (e.length<5 || UTIL_emailIsValid(e)==false) { alert('Please specify a valid email'); return false; }

	var p = f.txt_l_pass.value
	if (f.txt_l_pass.type=='text' || p.length<5) { alert('Please specify a valid password (5 or more characters)'); return false; }

	// login
	UTIL_JSON("/ajax/login.aspx", {e: e, p: p}, function(r){
		if (r.error!=null) {
			GAevent('Login', 'error', r.error);
			alert(r.error);
			return false;

		} else if (r.ID!=null) {

			// add to G Analytics
			GAevent('Login', 'done');

			// reload this page so we can get everything we need from the user
			location.reload();

		}
	})

	GAevent('Login', 'try');
}



// ----- Register ------

// Register: show form
function register_show( registerEmail ) {

	// show the email to register
	$("#alert_register").show();

	// analytics
	GAevent('Register', 'show');

	// if an email to register was specified, load it 
	if (registerEmail!=null) {
		$("#txt_r_email").val( registerEmail );
	}

}

// Register: action
var register_requested = false;
function register(f) {

	// validate 
	var e = f.txt_r_email.value;
	if (e.length<5 || UTIL_emailIsValid(e)==false) { alert('Please specify a valid email'); return false; }

	var p = f.txt_r_pass.value
	if (f.txt_r_pass.type=='text' || p.length<5) { alert('Please specify a valid password (5 or more characters)'); return false; }

	var p2 = f.txt_r_pass2.value
	if (p2!=p) { alert('The password and the password repetition are different.'); return false; }

	var t = $("input[name=rbl_r_target]:checked").val();
	if (t=='' || t==null) { alert('Please specify if you are a... Student, Teacher or a Curious Mind!'); return false; }	

	var n = 2;
	if (!f.chk_r_newsletter.checked){ n = 0 }

	// we do this to avoid double clicks on "register"
	if (register_requested){ return false };
	register_requested = true;
	
	
	// register
	UTIL_JSON("/ajax/register.aspx", {e: e, p: p, t: t, n : n}, function(r){
		if (r.error!=null) {
			register_requested = false;
			GAevent('Register', 'error', r.error);
			alert(r.error);
			return false;

		} else if (r.ID != null) {
			GAevent('Register', 'done');

			// save the user and do page login
			user.ID = r.ID;
			user.IP = r.IP;
			setUserLoginOrUserOptions();

			// show the profile (step 2) window
			user.isRegistering = true;
			profile_show();

			// hide the register window
			$("#alert_register").hide();

			// send confirmation email
			UTIL_JSON("/ajax/registerSendEmail.aspx", null, function(r){})

			// add the seen items from the cookie.. and empty the cookie
			if (factsSeenCookie!='') { 
				seenItems( factsSeenCookie );
				UTIL_setCookie("factsSeen", "");
			}
		}
	})

	GAevent('Register', 'try');
}


// ------ Missing Fields functions

// Missing Fields: show form
function missingFields_show() {

	// show or hide each field missing
	for (var i=0; i < user.missingFields.length; i++) {
		$("#alert_missingFields_" + user.missingFields[i]).show();
	}

	// show the form
	$("#alert_missingFields").show();

	// analytics
	GAevent('MissingFields', 'show');

}

// Missing Fields: save data
function missingFields(f) {

	
	var e = f.txt_m_email.value;
	if (user.missingFields.indexOf("email")>-1 && (e.length<5 || UTIL_emailIsValid(e)==false)) { alert('Please specify a valid email'); return false; }

	var p = f.txt_m_pass.value
	if (user.missingFields.indexOf("pass")>-1 && (f.txt_m_pass.type=='text' || p.length<5)) { alert('Please specify a valid password (5 or more characters)'); return false; }

	var p2 = f.txt_m_pass2.value
	if (user.missingFields.indexOf("pass")>-1 && (p2!=p)) { alert('The password and the password repetition are different.'); return false; }

	var t = $("input[name=rbl_m_target]:checked").val();
	if (user.missingFields.indexOf("target")>-1 && (t=='' || t==null)) { alert('Please specify if you are a... Student, Teacher or a Curious Mind!'); return false; }	

	// register
	UTIL_JSON("/ajax/missingFields.aspx", {e: e, p: p, t: t, missingFields : user.missingFields.join() }, function(r){
		if (r.error!=null) {
			GAevent('MissingFields', 'error', r.error);
			alert(r.error);
			return false;

		} else if (r.ID != null) {
			GAevent('MissingFields', 'done');

			// send confirmation email, if the email was initially missing
			if (user.missingFields.indexOf("email")>-1) { UTIL_JSON("/ajax/registerSendEmail.aspx", null, function(r){}) }

			// hide this form
			$("#alert_missingFields").hide();


		}
	})

	GAevent('MissingFields', 'try');
}



// ----- Logo menu functions

// Logo: show menu
function logo_showMenu() {
	$("#logo_menu").show()
}

// Logo: hide menu
function logo_hideMenu() {
	$("#logo_menu").hide()
}

// Log: toggle menu
function logo_toggle() {
	if ($("#logo_menu").is(":visible")) {
		logo_hideMenu()
	} else {
		logo_showMenu()
	}
}



// ----- User Registered menu functions

// User Registered: show menu
function user_registered_showMenu() {
	$("#user_registered_menu").show()
}

// User Registered: hide menu
function user_registered_hideMenu() {
	$("#user_registered_menu").hide()
}


// User Registered: show menu
function user_registered_toggle() {
	if ($("#user_registered_menu").is(":visible")) {
		user_registered_hideMenu()
	} else {
		user_registered_showMenu()
	}
}

// ----- Interests --------

// Interests: show the form
var interests_loaded = false;
function interests_show() {

	// analytics
	GAevent('Interests', 'show');

	// if the user is NOT registering.. we hide the step label
	if (!user.isRegistering) { $("#alert_interests_step").hide(); var t = $("#alert_interests_title"); t.removeClass("alert_title2"); t.addClass("alert_title"); };

	// add list of categories to be interested in
	if (!interests_loaded) {
		UTIL_JSON("/ajax/getCategories.aspx", null, function(r){

			for (var i=0; i < r.length; i++) { 

				// add this main category
				var mainCat = $("#alert_interests_mainCat_X").clone().appendTo( "#alert_interests_cats" );
				mainCat.append("<br/>")

				var c = mainCat.find("#alert_interestsM_X");
				var l = mainCat.find("label[for=alert_interestsM_X]");
			
				c.attr("id",  "alert_interestsM_" + r[i].c );
				c.prop("checked", true);
				c.val(r[i].c);
				c.change(function() { $(this).parent().find(".alert_check").prop("checked", $(this).prop("checked")) } )

				l.attr("for", "alert_interestsM_" + r[i].c );
				l.text( r[i].n );



				// for each subcategory under it...
				for (var s=0; s < r[i].s.length; s++) { 

					var c = mainCat.find("#alert_interests_X").eq(0).clone().appendTo( mainCat )
					var l = mainCat.find("label[for=alert_interests_X]").eq(0).clone().appendTo( mainCat );
					mainCat.append("<br/>")
					
					c.css("margin-left","2em")
					c.attr("id",  "alert_interests_" + r[i].s[s].c );
					c.attr("name","alert_interests" );
					c.prop("checked", true);
					c.val(r[i].s[s].c);

					l.attr("for", "alert_interests_" + r[i].s[s].c );
					l.text( r[i].s[s].n );

					c.show();
					l.show();
				}

				mainCat.show();
			}



			interests_loaded = true;
			$("#alert_interests").show()
		})
	} else {
		$("#alert_interests").show()
	}

	


	// if it doesn't comes from register...
	if (!user.isRegistering) {

		// get the users' current interests
		UTIL_JSON("/ajax/getUserCategories.aspx", null, function(r){
			if (r.error!=null) {
				alert(r.error);
				return false;
			} else if (r.length==0) {
				$("#alert_interests_cats input").prop("checked",true);
			} else {
				var l = $("input[name=alert_interests]").prop("checked", false);
				for (var i=0; i<r.length; i++) {
					$("#alert_interests_" + r[i]).prop("checked", true);

				}
			}
		})
	}
}

function interests() {

	// get the selected interests and validate it
	var l = $("input[name=alert_interests]:checked");
	if (l.length<5) { alert('Please at least 5 interests'); return false; }

	// prepare the list
	var il = '';	
	for (var i=0; i<l.length; i++) {
		il += (il!='' ? ',' : '')  +  l[i].value
	}

	// update
	UTIL_JSON("/ajax/setUserCategories.aspx", {il: il}, function(r){
		if (r.error!=null) {

			// analytics
			GAevent('Interests', 'error', r.error);

			// show error and get out
			alert(r.error);
			return false;
		} else {

			// analytics
			GAevent('Interests', 'done');

			// hide the form
			$("#alert_interests").hide();

			// if the user was in the user personalized page OR if it is registering itself now, we reload the page
			if (pageType=="UserPersonalized" || user.isRegistering) { 
				location='/' 
			} else if (user.isRegistering) {
				location.reload()
			}
		}
	})

	// analytics
	GAevent('Interests', 'try');
}



// ----- Slide Settings functions --------

function slideSettings_show() {

	// animation set current value
	$("#alert_slideSettings_animation").prop("checked", user.animation)
	$("label[for=alert_slideSettings_animation").text( (user.animation ? "Animation ON" : "Animation OFF") )

	// autoslide set current value
	$("#alert_slideSettings_autoslide").val( user.autoslide )

	// show form
	$("#alert_slideSettings").show();
}

function slideSettings(f) {

	// get animation and autoslide values
	user.animation = $("#alert_slideSettings_animation").prop("checked")
	user.autoslide = parseInt( $("#alert_slideSettings_autoslide").val() )

	// if it's a visitor, set changes on a cookie...
	if (user.ID == null) {

		UTIL_setCookie("animate", user.animation)
		UTIL_setCookie("autoslide", user.autoslide);
		slideSettings_autoslide();
		$("#alert_slideSettings").hide();

		// analytics
		GAevent('SlideSettings', 'done');

	// if it's a registered user, set changes on DB...
	} else {

		
		// update
		UTIL_JSON("/ajax/slideSettings.aspx", {an: user.animation, au: user.autoslide}, function(r){
			if (r.error!=null) {

				// analytics
				GAevent('SlideSettings', 'error', r.error);

				// show error and get out
				alert(r.error);
				return false;

			} else {

				// hide form
				$("#alert_slideSettings").hide();

				// analytics
				GAevent('SlideSettings', 'done');

				// apply to the current page
				slideSettings_autoslide();
			}
		})
		

	}

	// analytics
	GAevent('SlideSettings', 'try');
}

function slideSettings_autoslide() {
	if (user.autoslide==0) {
		clearTimeout(autoslideOBJ)
		autoslideOBJ = null;
	} else {
		clearTimeout(autoslideOBJ)
		slideSettings_autoslide_OBJ( user.autoslide );
	}
}

function slideSettings_autoslide_OBJ( secs ) {
	autoslideOBJ = setTimeout(function(){ getItem(); slideSettings_autoslide_OBJ( secs ) }, secs * 1000)
}





// ----- Change pass functions --------

// Change Pass: show form
function changePass_show() {

	// show the form
	$("#alert_changePass").show();

	// analytics
	GAevent('ChangePass', 'show');
}

// Change Pass: action
function changePass(f) {
	if (f==null) { f = document.getElementById("formchangePass") };  

	var o = f.txt_r_passold.value
	if (o.length<5) { alert('Please specify your current password. It must be longer than 4 characters'); return false; }

	var p = f.txt_r_pass.value
	if (p.length<5) { alert('Please use a password longer than 4 characters'); return false; }

	var p2 = f.txt_r_pass2.value
	if (p2!=p) { alert('The new password and the password repetition are different.'); return false; }

	// changePass
	UTIL_JSON("/ajax/changePass.aspx", {o: o, p: p}, function(r){
		if (r.error!=null) {

			// analytics
			GAevent('ChangePass', 'error', r.error);

			// show error and get out
			alert(r.error);
			return false;
		} else  {

			// analytics
			GAevent('ChangePass', 'done');
			
			// hide the form
			$("#alert_changePass").hide()

		}
	})

	GAevent('ChangePass', 'try');
}



// ----- Logout functions -----------

function logout() {

	// hide all user options
	$("#user_registered").hide()

	// login
	UTIL_JSON("/ajax/logout.aspx", null, function(r){
		if (r.error!=null) {

			// analytics
			GAevent('ChangePass', 'error', r.error);

			// show error and get out
			alert(r.error);
			return false;
		} else {
			GAevent('Logout', 'done');
	
			// if the user was in a user-only area, go to home page
			if (pageType=="UserPersonalized") { location='/'; }

			user = getEmptyUser();
			setUserLoginOrUserOptions();
		}
	})

	GAevent('Logout', 'try');
}



// ----- Profile --------

// Profile: show the form
var profile_country_loaded = false;
function profile_show( getCurrentProfile ) {

	// analytics
	GAevent('Profile', 'show', user.isRegistering );

	// if the page has not loaded yet, try again in a second
	if (!pLoaded) { setTimeout(function(){ profile_show(getCurrentProfile) }, 1000); return false; }

	// if it doesn't comes from register (step 1), we hide the "step #" label
	if (!user.isRegistering) { $("#alert_profile_step").hide(); $("#alert_profile_title").removeClass("alert_title2"); $("#alert_profile_title").addClass("alert_title"); };

	// add years 
	var y = $("#drp_p_birthyear");
	if (y.find("option").size()==1) { for (var i=1920; i<2012; i++) { y.append($('<option>', { value: i, text: i})); }; }

	// add days
	var d = $("#drp_p_birthday");
	if (d.find("option").size()==1) { for (var i=1; i<32; i++) { d.append($('<option>', { value: UTIL_pad2(i), text: i})); }; }

	// add countries
	if (!profile_country_loaded) {
		UTIL_JSON("js/countrycodes.js", null, function(r){
			var c = $("#drp_p_country");
			for (var i=0; i<r.length; i++) { c.append($('<option>', { value: r[i].c, text: r[i].n})); };
			profile_country_loaded = true;
		})
	}

	// if the user is updating its profile, not registering... or if this is forced by the getCurrentProfile parameter
	if (!user.isRegistering || getCurrentProfile) { 

		// get the profile
		UTIL_JSON("/ajax/getProfile.aspx", null, function(r){
			if (r.error!=null) {
				alert(r.error);
				return false;
			} else {
				if (r.n!="") { $("#txt_p_name").val(r.n); };
				if (r.g!="") { $("#rbl_p_gender_" + r.g).prop("checked", true); };
				if (r.b!="") { 
					$("#drp_p_birthyear").val(r.b.split("-")[0]); 
					$("#drp_p_birthmonth").val(r.b.split("-")[1]); 
					$("#drp_p_birthday").val(r.b.split("-")[2]); 
				};
				if (r.c!="") { profile_country_load_value(r.c);	} else { profile_getCountryFromIP() };
				$("#alert_profile").show()
			}
		})

	// if the user is registering...
	} else {
	
		// async try to get the country from its IP
		profile_getCountryFromIP()

		// show the profile
		$("#alert_profile").show()

	}
}


function profile_getCountryFromIP() {

	// if the user is registering... we try to select its country based on its IP
	if (user.IP != null) {
		UTIL_JSON("http://freegeoip.net/json/" + user.IP, null, function(r){
			if (r.country_code != null) {
				profile_country_load_value(r.country_code);
			}	
		})
	}
}

function profile_country_load_value(v) {
	if (profile_country_loaded) { $("#drp_p_country").val(v); } else { setTimeout('profile_country_load_value("' + v + '")', 1000); };
}



function profile(f) {

	var n = $("#txt_p_name").val();
	var g = $("input[name=rbl_p_gender]:checked").val();
	var b = $("#drp_p_birthyear").val() + '-' + $("#drp_p_birthmonth").val() + '-' + $("#drp_p_birthday").val();
	var c = $("#drp_p_country").val()

	if (n=='Your Name') { n='' };

	// update
	UTIL_JSON("/ajax/profile.aspx", {n: n, g: g, b:b, c:c}, function(r){
		if (r.error!=null) {

			// analytics
			GAevent('Profile', 'error', r.error );

			// show error and get out
			alert(r.error);
			return false;

		} else {

			// set the user and do login stuff
			user.name = r.n;
			setUserLoginOrUserOptions()

			// analytics
			GAevent('Profile', 'done');
	
			// if we are in the process of registering the user, show the next step
			if (user.isRegistering) { interests_show() }

			$("#alert_profile").hide()
		}
	})

	GAevent('Profile', 'try');
}





// ----- Trending ------

function trending_more( total, more ) {

	// how many items per click should we show?
	var itemsPerClick = 6;

	// how many items have we shown so far?
	var shown = $(".trending_content_item").length;

	// do we have X more items to show?
	if (shown + itemsPerClick <= total) {

		// what # of item of var "more" should we start at?
		var startAt = shown - itemsPerClick;

		// for each item to add
		for (var i = 0; i < itemsPerClick; i++ ) {

			// create the item (by cloning the first one)
			var newItem = $(".trending_content_item").eq(i).clone().insertAfter(".trending_content_item:last");

			// get the item's data	
			var url 	= more[	(startAt * 4) +	(i * 4) +0 ];
			var totalFacts 	= more[ (startAt * 4) +	(i * 4) +1 ];
			var title 	= more[ (startAt * 4) +	(i * 4) +2 ];
			var category 	= more[ (startAt * 4) +	(i * 4) +3 ];

			// set URL
			newItem.find("a").attr("href", "s-" + url);

			// set category
			newItem.find("span").text( category );
				
			// set image
			newItem.find("img").attr("src", "/imgs/trending/" + url + ".jpg" );

			// set title
			newItem.find("b").text( title );

			//alert( "url: " + url + " - totalFacts: " + totalFacts + " - title: " + title + " - category: " + category)
		
		}

		if (shown + itemsPerClick == total) { $("#trending_content_more").hide() };

		// save on GA
		GAevent('Trending', 'more', 'page' + ((shown + itemsPerClick) / itemsPerClick)  );
	}
}




function trending_more_xxxx() {
	var rows = $(".trending_content_row");

	for (var i=0; i < rows.length; i++) {
		if ( rows.eq(i).is(":visible")==false ) {

			// show this and the next row
			rows.eq(i).show();
			if (i+1 < rows.length) { rows.eq(i+1).show() }

			// save on GA
			GAevent('Trending', 'more', 'page' + ((i+1)/2) );

			// end for
			i = rows.length;
		}
	}

}



// ----- Search ------

// Search: show form
function search_show() {
	var b = $("#search_form_box");
	b.show();
	b.focus();
}


// ----- about ------

// About show alert
function about(what) {


	// save on GA
	GAevent('About', what  );

	// privacy and contact have their own popups
	if (what=='privacy' || what=='contact') {
		UTIL_sWin('/' + what);

	// the rest are shown on page
	} else {

		$("#alert_about").find(".alert_value").hide();
		$("#alert_about_" + what.replace(' ','_')).show();
		$("#alert_about").find(".alert_title").text(what);
		$("#alert_about").show();
		location = '#top'
	}

}





// ---- ads -----

function prepareAds() {

	if (Taboola) {
		console.log("load taboola on prepareads");

		 window._taboola = window._taboola || [];
		_taboola.push({photo:'auto'}); 
		!function (e, f, u) {
		    e.async = 1;
		    e.src = u;
		    f.parentNode.insertBefore(e, f);
		}(document.createElement('script'), document.getElementsByTagName('script')[0], 'http://cdn.taboola.com/libtrc/oddee-factslides/loader.js');

	}
}




// ---- Google Analytics ----

  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-42260559-1', 'factslides.com');


// add this pageview if is not a test nor local
if (!pISTEST && !pISLOCAL && !pISSYSTEM) {
	ga('send', 'pageview');
}

// adds a Google Analytics event
function GAevent(GAcat, GAaction, GAlabel, GAvalue) {
	if (!pISTEST && !pISLOCAL && !pISSYSTEM) {
		ga('send', 'event', GAcat, GAaction, GAlabel, GAvalue);
	} else {
		if (GAshowalert) { alert("Cat: " + GAcat + " - Action: " + GAaction + " - Label: " + GAlabel + " - Value: " + GAvalue); }
	}
}

// adds a Google Analytics pageview
function GApageview(pageurl) {
	// do it only if  it's not localhost nor a test 
	if (!pISLOCAL && !pISTEST && !pISSYSTEM) {
		ga('send', 'pageview', pageurl);
	} else {
		if (GAshowalert) { alert("Google Analytics Pageview: " + pageurl) }
	}
}



// ---- Util ----

// gets the value of the specified querystring
function UTIL_querystring(paramName) {
	parName = paramName.replace(/[\[]/, '\\\[').replace(/[\]]/, '\\\]');
	var pattern = '[\\?&]' + paramName + '=([^&#]*)';
	var regex = new RegExp(pattern);
	var matches = regex.exec(window.location.href);
	if (matches == null) { 
		return '';
	} else { 
		return decodeURIComponent(matches[1].replace(/\+/g, ' '));
	};
}

function UTIL_emailIsValid(e) {
	var regex = /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
	return regex.test(e)
}


// set a cookie on the browser
function UTIL_setCookie(c_name, value, expire) {
	var exdate = new Date();
	exdate.setDate(exdate.getDate() + expire);
	document.cookie = c_name + "=" + escape(value) + ((expire == null) ? "" : ";expires=" + exdate.toGMTString());
}

// get a cookie from the browser
function UTIL_getCookie(c_name) {
	if (document.cookie.length > 0) {
		c_start = document.cookie.indexOf(c_name + "=");
		if (c_start != -1) {
			c_start = c_start + c_name.length + 1;
			c_end = document.cookie.indexOf(";", c_start);
			if (c_end == -1) {
				c_end = document.cookie.length;
			}
			return unescape(document.cookie.substring(c_start, c_end));
		}
	}
	return "";
}

// get JSON helper
function UTIL_JSON(jsonURL, postData, callback, callbackOnError, useSameCallback) {

	// set type of request
	var reqType = "GET";
	if (postData!=null) { reqType = "POST" }

	// set callback on error if it wasn't specified 
	if (useSameCallback != null && callbackOnError == null) { if (useSameCallback) { callbackOnError = callback } }

	jQuery.ajax({ url: jsonURL, type: reqType, data:postData, dataType: "json",
		success: function (data) {
			if (callback!=null) { callback(data) };
		},
		error: function (XMLHttpRequest, textStatus, errorThrown) {
			var aspneterror = "";
			if (jsonURL.toLowerCase().indexOf(".aspx") > -1 && XMLHttpRequest!=null) {
				var pos = XMLHttpRequest.responseText.search("<!" + "--")
				if (pos!=-1) {
					//var pos2 = XMLHttpRequest.responseText.search("   ")
					aspneterror = XMLHttpRequest.responseText.substr(pos+6)
				}
			}
	
			if (pISLOCAL) { alert("Error on UTIL_JSON. TextStatus: " + textStatus + " - ErrorThrown: " + errorThrown + " - ASP.net Error: " + aspneterror, jsonURL, "") }
			if (callbackOnError != null) { callbackOnError(null, textStatus, errorThrown) };
		}
	});
}

function UTIL_pad2(number) { return (number < 10 ? '0' : '') + number }

function UTIL_sWin( p ) {
	window.open(p, 'sWin','width=700,height=450,top=100,left=100,menubar=no,titlebar=no,toolbar=no'); 
	return false;
}

function UTIL_browserIsMobile() {
	!function(a){var b=/iPhone/i,c=/iPod/i,d=/iPad/i,e=/(?=.*\bAndroid\b)(?=.*\bMobile\b)/i,f=/Android/i,g=/(?=.*\bAndroid\b)(?=.*\bSD4930UR\b)/i,h=/(?=.*\bAndroid\b)(?=.*\b(?:KFOT|KFTT|KFJWI|KFJWA|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|KFARWI|KFASWI|KFSAWI|KFSAWA)\b)/i,i=/Windows Phone/i,j=/(?=.*\bWindows\b)(?=.*\bARM\b)/i,k=/BlackBerry/i,l=/BB10/i,m=/Opera Mini/i,n=/(CriOS|Chrome)(?=.*\bMobile\b)/i,o=/(?=.*\bFirefox\b)(?=.*\bMobile\b)/i,p=new RegExp("(?:Nexus 7|BNTV250|Kindle Fire|Silk|GT-P1000)","i"),q=function(a,b){return a.test(b)},r=function(a){var r=a||navigator.userAgent,s=r.split("[FBAN");if("undefined"!=typeof s[1]&&(r=s[0]),s=r.split("Twitter"),"undefined"!=typeof s[1]&&(r=s[0]),this.apple={phone:q(b,r),ipod:q(c,r),tablet:!q(b,r)&&q(d,r),device:q(b,r)||q(c,r)||q(d,r)},this.amazon={phone:q(g,r),tablet:!q(g,r)&&q(h,r),device:q(g,r)||q(h,r)},this.android={phone:q(g,r)||q(e,r),tablet:!q(g,r)&&!q(e,r)&&(q(h,r)||q(f,r)),device:q(g,r)||q(h,r)||q(e,r)||q(f,r)},this.windows={phone:q(i,r),tablet:q(j,r),device:q(i,r)||q(j,r)},this.other={blackberry:q(k,r),blackberry10:q(l,r),opera:q(m,r),firefox:q(o,r),chrome:q(n,r),device:q(k,r)||q(l,r)||q(m,r)||q(o,r)||q(n,r)},this.seven_inch=q(p,r),this.any=this.apple.device||this.android.device||this.windows.device||this.other.device||this.seven_inch,this.phone=this.apple.phone||this.android.phone||this.windows.phone,this.tablet=this.apple.tablet||this.android.tablet||this.windows.tablet,"undefined"==typeof window)return this},s=function(){var a=new r;return a.Class=r,a};"undefined"!=typeof module&&module.exports&&"undefined"==typeof window?module.exports=r:"undefined"!=typeof module&&module.exports&&"undefined"!=typeof window?module.exports=s():"function"==typeof define&&define.amd?define("isMobile",[],a.isMobile=s()):a.isMobile=s()}(this);
	return isMobile.any;
}



function UTIL_swipedetect(el, callback){
  
    var touchsurface = el,
    swipedir,
    startX,
    startY,
    distX,
    distY,
    threshold = 10, //required min distance traveled to be considered swipe
    restraint = 100, // maximum distance allowed at the same time in perpendicular direction
    allowedTime = 300, // maximum time allowed to travel that distance
    elapsedTime,
    startTime,
    handleswipe = callback || function(swipedir, distX, distY){}
  
    touchsurface.addEventListener('touchstart', function(e){
        var touchobj = e.changedTouches[0]
        swipedir = 'none'
        dist = 0
        startX = touchobj.pageX
        startY = touchobj.pageY
        startTime = new Date().getTime() // record time when finger first makes contact with surface
        e.preventDefault()
    }, false)
  
    touchsurface.addEventListener('touchmove', function(e){
        e.preventDefault() // prevent scrolling when inside DIV
    }, false)
  
    touchsurface.addEventListener('touchend', function(e){
        var touchobj = e.changedTouches[0]
        distX = touchobj.pageX - startX // get horizontal dist traveled by finger while in contact with surface
        distY = touchobj.pageY - startY // get vertical dist traveled by finger while in contact with surface
        elapsedTime = new Date().getTime() - startTime // get time elapsed
        if (elapsedTime <= allowedTime){ // first condition for awipe met
            if (Math.abs(distX) >= threshold && Math.abs(distY) <= restraint){ // 2nd condition for horizontal swipe met
                swipedir = (distX < 0)? 'left' : 'right' // if dist traveled is negative, it indicates left swipe
            }
            else if (Math.abs(distY) >= threshold && Math.abs(distX) <= restraint){ // 2nd condition for vertical swipe met
                swipedir = (distY < 0)? 'up' : 'down' // if dist traveled is negative, it indicates up swipe
            }
        }
        handleswipe(swipedir, distX, distY)
        e.preventDefault()
    }, false)
}